from django.db import models
from .enums import ContentLanguageStatus

# /contents/<slug>

# Create your models here.
class Content(models.Model):
    title = models.CharField(max_length=255)
    description = models.CharField(max_length=500)
    keywords = models.JSONField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    deleted_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        db_table = 'contents'

    def __str__(self):
        return self.title

class ContentLanguage(models.Model):
    status = models.SmallIntegerField(
        choices=ContentLanguageStatus.choices,
        default=ContentLanguageStatus.WAITING
    )
    content = models.ForeignKey('Content', related_name="content_language", on_delete=models.CASCADE, default=None, null=True)
    language = models.ForeignKey('Language', related_name="content_language", on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    deleted_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        db_table = 'content_languages'
        unique_together = ('content', 'language')

    def __str__(self):
        return f"{self.content.title} - {self.language.iso_code}"
    
    def get_status(self):
        return ContentLanguageStatus(self.status).label
    
    def is_waiting(self):
        return self.status == ContentLanguageStatus.WAITING
    
    def is_completed(self):
        return self.status == ContentLanguageStatus.COMPLETED
    
    def is_failed(self):
        return self.status == ContentLanguageStatus.FAILED
    
    def set_waiting(self):
        self.status = ContentLanguageStatus.WAITING
        self.save()
    
    def set_completed(self):
        self.status = ContentLanguageStatus.COMPLETED
        self.save()

    def set_failed(self):
        self.status = ContentLanguageStatus.FAILED
        self.save()

class PromptHistory(models.Model):
    content = models.ForeignKey('ContentVersion', related_name="prompt_history", on_delete=models.CASCADE)
    language = models.ForeignKey('Language', on_delete=models.CASCADE)  # ISO code
    prompt = models.TextField()  # Prompt entered by the user
    created_at = models.DateTimeField(auto_now_add=True)  # Request date

    class Meta:
        db_table = 'prompt_histories'

    def __str__(self):
        return f"Prompt for {self.content.title} ({self.language.iso_code}) at {self.created_at}"

class ContentVersion(models.Model):
    # SEO Stuff
    generated_text = models.TextField()  # Content generated by AI

    slug = models.SlugField(max_length=60, blank=True)
    title_tag = models.CharField(max_length=60, blank=True)  # SEO title
    meta_description = models.CharField(max_length=160, blank=True)  # Meta description
    meta_keywords = models.CharField(max_length=255, blank=True)  # Meta keywords
    og_title = models.CharField(max_length=60, blank=True)  # Open Graph title
    og_description = models.CharField(max_length=160, blank=True)  # Open Graph description
    twitter_title = models.CharField(max_length=60, blank=True)  # Twitter title
    twitter_description = models.CharField(max_length=160, blank=True)  # Twitter description

    content = models.ForeignKey('Content', related_name="versions", on_delete=models.CASCADE)
    language = models.ForeignKey('Language', on_delete=models.CASCADE)  # ISO code (e.g. 'tr', 'en')
    prompt = models.ForeignKey('PromptHistory', related_name="content_version", on_delete=models.CASCADE)  # Prompt used by the user
    version = models.IntegerField(default=1)  # Version number
    created_at = models.DateTimeField(auto_now_add=True)  # Generation date

    class Meta:
        db_table = 'content_versions'

    def __str__(self):
        return f"{self.content.title} - {self.language.iso_code} - {self.version} - {self.created_at}"

class Language(models.Model):
    name = models.CharField(max_length=100)  # e.g. 'English', 'Turkish'
    iso_code = models.CharField(max_length=10, unique=True)  # e.g. 'en', 'tr'
    is_rtl = models.BooleanField(default=False)  # Whether the language is written from right to left
    created_at = models.DateTimeField(auto_now_add=True)  # Creation date
    deleted_at = models.DateTimeField(null=True, blank=True)  # Soft delete timestamp

    class Meta:
        db_table = 'languages'

    def __str__(self):
        return self.name